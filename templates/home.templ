package templates

import "summy/models"
import "fmt"
import "net/url"
import "strconv"

templ Home() {
    <div class="flex flex-col gap-y-8">
        <div>
            <div class="flex justify-between align-center mb-2">
                <h1 class="text-white text-4xl mb-4">Tasks In Progress:</h1>
                <button type="button" hx-get="/addTaskModal" hx-target="body" hx-swap="beforeend" class="text-black bg-white px-2 py-1 m-2 rounded">+ Add Task</button>
            </div>
            <div class="text-white" hx-get="/tasks?size=9&page=1&status=in_progress" hx-trigger="load" hx-target="this" hx-swap="innerHTML">Loading tasks...</div>
        </div>
        
        <div>
            <div class="flex justify-between align-center mb-2">
                <h1 class="text-white text-4xl mb-4">New Discovered Tasks:</h1>
            </div>
            <div class="text-white" hx-get="/tasks?size=9&page=1&status=discovered" hx-trigger="load" hx-target="this" hx-swap="innerHTML">Loading tasks...</div>
        </div>
    </div>
}

templ TaskCard(task models.Task) {
    <div class="text-white p-4 bg-gray-800 hover:bg-gray-700 rounded mb-4">
        <div class="flex justify-between align-center mb-4">
            <h2 class="text-xl">{ task.Title }</h2>
            <span class={
                "rounded px-2 py-1", 
                templ.KV("bg-blue-600", task.Status == "in_progress"),
                templ.KV("bg-white text-black", task.Status == "discovered"),
                templ.KV("bg-green-700", task.Status == "completed"),
            }>
                {task.Status}
            </span>
        </div>
        <p class="text-muted">{ task.Description }</p>
        if task.DueDate != nil {
            <p class="text-muted">Due: { task.DueDate.String() }</p>
        }
    </div>
}

templ PaginatedTaskList(taskList []models.Task, page int, size int, url *url.URL) {
    <div>
        <div id="taskList" class="grid grid-cols-3 gap-3">
            for _, task := range taskList {
                @TaskCard(task)
            }
        </div>
        @PaginationTabs(url, len(taskList), page, size)
    </div>
}

templ PaginationTabs(pageUrl *url.URL, nItems int, page int, size int) {
    {{ 
        nextUrl, _ := url.Parse(pageUrl.String())
        prevUrl, _ := url.Parse(pageUrl.String())
        nextQuery := nextUrl.Query()
        prevQuery := prevUrl.Query()

        nextQuery.Set("page", strconv.Itoa(page+1))
        prevQuery.Set("page", strconv.Itoa(page-1))

        nextUrl.RawQuery = nextQuery.Encode()
        prevUrl.RawQuery = prevQuery.Encode()
    }}    


    <div class="flex text-white">
        if page > 1 {
            <button class="me-2 px-2 py-1 bg-gray-700 rounded" hx-get={ prevUrl.String() }>prev</button>
        }
        
        <span class="px-2 py-1 bg-gray-700 rounded">{ fmt.Sprintf("%d", page) }</span>

        if nItems == size {
            <button class="ms-2 px-2 py-1 bg-gray-700 rounded" hx-get={ nextUrl.String() }>next</button>
        }
    </div>
}

templ AddTaskModal() {
    <div _="on closeModal remove me" class="fixed top-0 left-0 w-full h-full bg-black bg-opacity-50 flex justify-center items-center">
        <form hx-post="/tasks" hx-trigger="submit" hx-swap="none" class="bg-gray-800 p-4 rounded flex flex-col gap-y-2">
            <div class="flex justify-between mb-2">
                <h2 class="text-white text-2xl mb-4">Add Task</h2>
                <span class="text-2xl text-white" _="on click trigger closeModal">x</span>
            </div>
            
            <label for="title" class="text-white">Title:</label>
            <input type="text" name="title" class="rounded px-2 py-1" />
            
            <label for="description" class="text-white">Description:</label>
            <input type="textarea" name="description" class="rounded px-2 py-1" />
            
            <label for="dueDate" class="text-white">Due Date:</label>
            <input type="date" name="dueDate" class="rounded px-2 py-1" />

            <button type="submit" _="on click trigger closeModal" class="bg-gray-700 text-white px-2 py-1 rounded">Add Task</button>
        </form>
    </div>
}